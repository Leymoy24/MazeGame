# 7.3
class Room:
    def __init__(self, name, label, description, actions):
        self.name = name  # имя комнаты
        self.label = label  # метка для перехода в эту комнату
        self.description = description  # описание комнаты
        self.actions = actions  # действия


rooms = [
    Room("Начало лабиринта", "start", "Вы в начале лабиринта. Сможете ли из него выбраться?", {
        "1": "Проход на запад.02"
    }),
    Room("Комната №2", "02", "Вы находитесь в комнате №2.", {
        "1": "Проход на запад.03",
        "2": "Проход на север.04"
    }),
    Room("Комната №3", "03", "Вы находитесь в комнате №3. Вы пришли в тупик. Сожалеем, но вы проиграли :(", {}),
    Room("Комната №4", "04", "Вы находитесь в комнате №4.", {
        "1": "Проход на запад.05",
        "2": "Проход на север.06",
        "3": "Проход на восток.07"
    }),
    Room("Комната №5", "05", "Вы находитесь в комнате №5. Вы пришли в тупик. Сожалеем, но вы проиграли :(", {}),
    Room("Комната №6", "06", "Вы находитесь в комнате №6.", {
        "1": "Проход на запад.fn",
    }),
    Room("Комната №7", "07", "Вы находитесь в комнате №7.", {
        "1": "Проход на восток.08",
        "2": "Проход на север.09",
    }),
    Room("Комната №8", "08", "Вы находитесь в комнате №7.", {
        "1": "Проход на север.11"
    }),
    Room("Комната №9", "09", "Вы находитесь в комнате №9.", {
        "1": "Проход на север.10",
    }),
    Room("Комната №10", "10", "Вы находитесь в комнате №10.", {
        "1": "Проход на север.14",
        "2": "Проход на запад.15"
    }),
    Room("Комната №11", "11", "Вы находитесь в комнате №11.", {
        "1": "Проход на восток.13",
        "2": "Проход на север.12",
    }),
    Room("Комната №12", "12", "Вы находитесь в комнате №12. Вы пришли в тупик. Сожалеем, но вы проиграли :(", {}),
    Room("Комната №13", "13", "Вы находитесь в комнате №13. Вы пришли в тупик. Сожалеем, но вы проиграли :(", {}),
    Room("Комната №14", "14", "Вы находитесь в комнате №14. Вы пришли в тупик. Сожалеем, но вы проиграли :(", {}),
    Room("Комната №15", "15", "Вы находитесь в комнате №15. Вы пришли в тупик. Сожалеем, но вы проиграли :(", {}),
    Room("Конец лабиринта", "fn", "Поздравляем! Вы нашли выход из лабиринта!", {})
]


def find_dead_ends(current_room, visited_rooms):
    # Проверяем, является ли текущая комната конечной
    if current_room.label == "fn":
        return []

    # Добавляем текущую комнату в список посещенных
    visited_rooms.append(current_room)

    # Перебираем все доступные действия в комнате
    dead_ends = []
    for action, label in current_room.actions.items():
        # Получаем метку комнаты, на которую ведет это действие
        next_label = label[-2:]
        # Ищем комнату с такой меткой в списке всех комнат
        next_room = next((room for room in rooms if room.label == next_label), None)
        # Если следующая комната уже посещена, пропускаем ее
        if next_room in visited_rooms:
            continue
        # Рекурсивно вызываем функцию для следующей комнаты
        dead_ends.extend(find_dead_ends(next_room, visited_rooms))

    # Если у текущей комнаты нет доступных действий, добавляем ее в список тупиков
    if not current_room.actions:
        dead_ends.append(current_room)

    return dead_ends


# Вызываем функцию для начальной комнаты и пустого списка посещенных комнат
dead_ends = find_dead_ends(rooms[0], [])
if dead_ends:
    print("Тупики найдены:")
    for room in dead_ends:
        print(room.name)
else:
    print("Тупиков не найдено")
